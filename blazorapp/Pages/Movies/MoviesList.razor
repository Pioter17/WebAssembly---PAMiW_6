@page "/movies"

@* @using blazorapp.Shared.Services.MovieService; *@

@inject MovieService MovieService
@inject NavigationManager NavigationManager

<PageTitle>Movies</PageTitle>

<h3>Full list of movies</h3>


<p>
    <a href="movies/createmovie">Create new movie</a>
</p>

@if (movies == null)
{
    <p><em>@message</em></p>
}

else
{
    @if (movies.Count == 0)
    {
        <p><em>"Wystąpił błąd"</em></p>
    }
    <div>
        <InputText @bind-Value=searchTerm></InputText>
        <button class="btn btn-primary" @onclick=Search>Search</button>
    </div>
    


    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Director</th>
                <th>Producer</th>
                <th>Rating</th>
                <th>Length</th>
                <th>Options</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var movie in movies)
            {
                <tr>
                    <td>@movie.name</td>
                    <td>@movie.director.name</td>
                    <td>@movie.producer</td>
                    <td>@movie.rating</td>
                    <td>@movie.length</td>
                    <td>
                        <button class="btn btn-primary" @onclick="()=> GoToEdit(movie.name)">Edit</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <button class="btn btn-primary" disabled="@(currentPage==1)" @onclick="PreviousPage">Previous</button>
    <span>@currentPage</span>
    <button class="btn btn-primary" @onclick="NextPage">Next</button>
}



@code {
    private List<Shared.Models.Movie> movies;
    private string message = "Loading movies...";

    private int currentPage = 1;
    private const int pageSize = 10;

    private string searchTerm = "";

    protected override async Task OnInitializedAsync()
    {
        await  LoadMovies();
    }

    private async Task LoadMovies()
    {
        var response = await MovieService.GetMoviesAsync();//, currentPage, pageSize);
        movies = response;
    }

    void GoToEdit(string name)
    {
        NavigationManager.NavigateTo($"/movies/editmovie/{name}");
    }

    private async Task PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            await LoadMovies();
        }
    }
    private async Task NextPage()
    {
        currentPage++;
        await LoadMovies();
    }

    private async Task Search()
    {
        currentPage = 1;
        var response = await MovieService.SearchMoviesAsync(searchTerm);//, currentPage, pageSize);
        movies = response;
    }
}